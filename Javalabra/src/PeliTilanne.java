/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PeliTilanne.java
 *
 * Created on Oct 30, 2012, 7:40:19 PM
 */
/**
 *
 * @author jarno
 */

import java.awt.Color;
import java.awt.Graphics;
import javax.swing.JFrame;
import javax.swing.Timer;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;


public class PeliTilanne extends javax.swing.JFrame implements ActionListener {
    private Javalabra menu;
    //Status-table for game, for every x,y co-ordinate the table has a int-value between 0 and 4,
    //0 is empty square, 1 is black square, 2 is black square that is falling down and 3 is moving square that can't fall anymore,
    //and it will be changed to 1.
    private int[][] status;
    //For every x,y co-ordinate rotations-table includes how to rotate current block in x and y dimensions.
    private int[][][][] rotations;
    private int width;
    private int height;
    private int squareWidth;
    
    /** Creates new form PeliTilanne */
    public PeliTilanne() {
        initComponents();
    }
    
    /** Creates new form PeliTilanne and fills the game-status table status and rotations-table*/
    
    public PeliTilanne(Javalabra handle) {
        initComponents();
        menu = handle;
        this.squareWidth=20;
        this.width=12;
        this.height=15;
        this.status = new int[this.width][this.height];
        for (int i=0;i<this.width;++i){
            for (int j=0;j<this.height;++j){
                this.status[i][j]=0;
            }
        }
        this.rotations = new int[this.width][this.height][][]
        for (int i=0;i<this.width;++i){
            for (int j=0;j<this.height;++j){
                this.status[i][j]=0;
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jButton1.setText("Tauko");
        jButton1.setFocusPainted(false);
        jButton1.setFocusable(false);

        jButton2.setText("Lopeta");
        jButton2.setFocusPainted(false);
        jButton2.setFocusable(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(327, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addContainerGap(310, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*
     * Action Performed for button "Lopeta"
     */
    
private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    this.setVisible(false);
    (this.menu).setVisible(true);
}//GEN-LAST:event_jButton2ActionPerformed

/*
 * Method for drawing game-status
 */

@Override
public void paint(Graphics g) {
   
   super.paint(g);
   //Two loops to go trough status-table, and draw all the blocks
   for (int i=0;i<this.status.length;++i){
       for(int j=0;j<this.status[i].length;++j){
           if (status[i][j]>0) {
                g.setColor(Color.black);
                g.fillRect (20*i+50, 20*j+50, this.squareWidth, this.squareWidth);
           }
           else{
               g.clearRect (20*i+50, 20*j+50, this.squareWidth, this.squareWidth);
           }
       }
   }
}

/*
 * Method for keypress
 */

private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
    repaint();
    Timer timer = new Timer(1000, this);
    timer.start(); 
}//GEN-LAST:event_formKeyPressed

/*
 * Method for implementing abstract class ActionListener, updates the game-status
 * after set times.
 */

public void actionPerformed(ActionEvent e) {
    
    //Check if there are blocks on the top row (losing condition)
    for (int i=0;i<this.status.length;++i){
        if (this.status[i][0]==1){
            //code when the game is lost
        }
    }
    
    //Check if there are blocks moving
    boolean movingBlocks=false;
    for (int i=0;i<this.status.length;++i){
        for(int j=0;j<this.status[i].length;++j){
            if (this.status[i][j]==2) {
                //Code to tell block to fall down one row
                if (this.status[i].length>j+1) {
                    //Code to handle if block underneath is empty, moving or solid
                    if (this.status[i][j+1]==0){
                        this.status[i][j]=0;
                        //Status is set to 3 indicating a block has moved to a co-ordinate during current actionlistener-update
                        this.status[i][j+1]=3;
                    }
                    else if (this.status[i][j+1]==1){
                        this.status[i][j]=1;
                    }
                    else {
                        this.status[i][j]=0;
                        this.status[i][j+1]=2;
                    }
                }
                else{
                    this.status[i][j]=1;
                }
                movingBlocks=true;
            }
            if (this.status[i][j]==3){
                this.status[i][j]=2;
            }

        }
    }
    
    //Code to generate a new block
    if(!movingBlocks){
        this.status[0][0]=2;
    }

    repaint();
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    // End of variables declaration//GEN-END:variables
}
